name: Integration Tests

on:
  push:
    branches:
      - milestone5 # Trigger workflow on commits to the milestone5 branch
  pull_request:
    branches:
      - milestone5 # Trigger workflow for pull requests targeting the milestone5 branch

jobs:
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12 # Match your projectâ€™s Python version

      # Step 3: Install dependencies using pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests python-dotenv

      # Step 4: Load environment variables
      - name: Load environment variables
        env:
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }} # Set in GitHub Secrets
        run: echo "TEST_PASSWORD=${TEST_PASSWORD}" >> $GITHUB_ENV

      # Step 5: Run integration tests
      - name: Run Integration Tests
        run: pytest --rootdir=. tests/integration/

  spin-up-backend-containers:
    name: Spin Up Backend Containers
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Docker and Docker Compose
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 3: Decrypt GCP Service Account Key
      - name: Decrypt GCP Service Account Key
        run: |
          echo "${{ secrets.GCP_SA_KEY_CS_CRIMSONCHAT }}" | base64 -d > gcp.json

      # Step 4: Create Environment File
      - name: Create Environment File
        run: |
          echo "QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}" >> $GITHUB_WORKSPACE/.env
          echo "QDRANT_URL=${{ env.QDRANT_URL }}" >> $GITHUB_WORKSPACE/.env
          echo "QDRANT_COLLECTION_NAME=${{ env.QDRANT_COLLECTION_NAME }}" >> $GITHUB_WORKSPACE/.env
          echo "GCP_PROJECT=${{ env.GCP_PROJECT }}" >> $GITHUB_WORKSPACE/.env
          echo "LOCATION=${{ env.LOCATION }}" >> $GITHUB_WORKSPACE/.env
          echo "GCP_SERVICE_ACCOUNT=${{ env.GCP_SERVICE_ACCOUNT }}" >> $GITHUB_WORKSPACE/.env

      # Step 5: Start Docker containers using docker-compose
      - name: Start Backend and Frontend with Docker Compose
        run: docker-compose --env-file $GITHUB_WORKSPACE/.env up -d --build

      # Step 6: Wait for Containers
      - name: Wait for Containers to be Ready
        run: |
          echo "Waiting for services to be ready..."
          sleep 15

      # Step 7: Clean up containers after the tests
      - name: Tear Down Docker Containers
        if: always()
        run: docker-compose down
