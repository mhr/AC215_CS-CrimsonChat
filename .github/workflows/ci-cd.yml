name: CI Pipeline

on:
  push:
    branches:
      - milestone5
  pull_request:
    branches:
      - milestone5

jobs:
  test-secret-accessibility:
    name: Test GitHub Secret
    runs-on: ubuntu-latest
    steps:
      - name: Test GitHub Secret
        run: |
          if [ -z "${{ secrets.GCP_SA_KEY_CS_CRIMSONCHAT }}" ]; then
            echo "Secret GCP_SA_KEY_CS_CRIMSONCHAT is NOT accessible."
            exit 1
          else
            echo "Secret GCP_SA_KEY_CS_CRIMSONCHAT is accessible."
          fi

  model-training:
    if: contains(github.event.head_commit.message, '/run-model-training')
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Get secret
        run: |
          mkdir -p ../secrets
          echo "${{ secrets.GCP_SA_KEY_CS_CRIMSONCHAT }}" | base64 -d > ../secrets/crimsonchat.json

      - name: Run docker-shell.sh for Model Training
        working-directory: ./src/model_training
        run: |
          chmod +x docker-shell.sh
          ./docker-shell.sh --run-cli
        # Step 5: Create Environment File
      # - name: Create Environment File
      #   run: |
      #     echo "QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}" >> $GITHUB_WORKSPACE/.env
      #     echo "QDRANT_URL=${{ env.QDRANT_URL }}" >> $GITHUB_WORKSPACE/.env
      #     echo "QDRANT_COLLECTION_NAME=${{ env.QDRANT_COLLECTION_NAME }}" >> $GITHUB_WORKSPACE/.env
      #     echo "GCP_PROJECT=${{ env.GCP_PROJECT }}" >> $GITHUB_WORKSPACE/.env
      #     echo "LOCATION=${{ env.LOCATION }}" >> $GITHUB_WORKSPACE/.env
      #     echo "GCP_SERVICE_ACCOUNT=${{ env.GCP_SERVICE_ACCOUNT }}" >> $GITHUB_WORKSPACE/.env
      #     # Set the path to the service account credentials inside the container
      #     echo "GOOGLE_APPLICATION_CREDENTIALS=/app/gcp_key.json" >> $GITHUB_WORKSPACE/.env

      # - name: Debug .env File Path
      #   run: ls -la

      # # Step 6: Start Docker container
      # - name: Run docker-shell.sh for API-Service
      #   working-directory: ./src/api_service
      #   run: |
      #     chmod +x docker-shell.sh
      #     ./docker-shell.sh
      # # Step 7: Start Docker container
      # - name: Run docker-shell.sh for Frontend
      #   working-directory: ./src/react_ui
      #   run: |
      #     chmod +x docker-shell.sh
      #     ./docker-shell.sh

      # # Step 8: Check Docker Status
      # - name: Check Docker Status
      #   run: docker ps

      - name: Clean Up Temp Key
        if: always()
        run: rm -f ../secrets/crimsonchat.json

  lint-and-test:
    name: Lint and Test Microservices
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - api_service
          # - crimson_chat_ui
          - data_pipeline
          - data_pipeline_dynamic
          - model_training
          - rag_pipeline
          - vector_database

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # Install pipenv
      - name: Install pipenv
        run: pip install pipenv

      # Lint the service
      - name: Lint Code
        working-directory: src/${{ matrix.service }}
        run: |
          pipenv install --dev
          pipenv run flake8 .

      # Run tests if the tests folder exists
      - name: Run Tests
        working-directory: src/${{ matrix.service }}
        run: |
          if [ -d "tests" ] && [ "$(find tests -type f -name 'test_*.py')" ]; then
            pipenv install --dev
            pipenv run pytest --cov=. --cov-report=xml --cov-report=term
          else
            echo "No tests found. Skipping..."
          fi
