{"https://3dp.seas.harvard.edu/sop/": {"text_content": "Skip to content HARVARD.EDU 3D Printing Core About Home Contact Visitor Information Getting Started Onboarding Material Selection Schedule a consultation Print Status Request a Print Search Toggle search interface Menu Toggle extended navigation Home Standard Operating Procedure Standard Operating Procedure Internal Harvard Users Paying with a 33-digit code Please be sure that you have access to a Harvard 33-digit billing ID, as defined here . Submit your 3D STL files using this form httpsseas3d.xyzstlv Be sure to have your 33 digit code prior to starting the application Select the Harvard 33 digit code option on the first page of the application Check the status of your print here httpswww.3dp.seas.harvard.edustatus Once your print is marked Finished on the status page, youll be able to pick it up outside of room 2.121 at the SEC Non-profit Institutions Paying with a Purchase Order Fill out the intake form found here httpsharvard.az1.qualtrics.comjfeformSV4MDJ2T7cy9MHgIS Before continuing to the next steps, please wait for a response from the lab manager about your eligibly Submit your 3D STL files using this form httpsseas3d.xyzstlv Select the Harvard AffiliateP.O. option on the first page of the application On the second page of the application be sure to upload your purchase order in the supplementary files field Check the status of your print here httpswww.3dp.seas.harvard.edustatus Once your print is marked Finished on the status page, youll be able to pick it up outside of room 2.121 at the SEC External users Paying with a Purchase Order Fill out the intake form found here httpsharvard.az1.qualtrics.comjfeformSV4MDJ2T7cy9MHgIS Before continuing to the next steps, please wait for a response from the lab manager about your eligibly Submit your 3D STL files using this form httpsseas3d.xyzstlv Select the Non-Harvard option on the first page of the application On the second page of the application be sure to upload your purchase order in the supplementary files field Check the status of your print here httpswww.3dp.seas.harvard.edustatus Once your print is marked Finished on the status page, youll be able to pick it up outside of room 2.121 at the SEC Copyright 2024 The President and Fellows of Harvard College Accessibility Digital Accessibility Report Copyright Infringement Log In close menu About Home Contact Visitor Information Getting Started Onboarding Material Selection Schedule a consultation Print Status Request a Print close search Search Search Site", "metadata": {"last_modified": "2024-10-17T20:58:27Z", "scraped_at": "2024-10-17T21:11:39Z", "word_count": 384, "url": "https://3dp.seas.harvard.edu/sop/"}}, "https://harvardpl.github.io/AbcDatalog/": {"text_content": "AbcDatalog Datalog thats as easy as ABC. About AbcDatalog is an open-source implementation of the logic programming language Datalog written in Java. It provides ready-to-use implementations of common Datalog evaluation algorithms, as well as some experimental multi-threaded evaluation engines. It supports language features beyond core Datalog such as explicit dis-unification of terms and stratified negation. Additionally, AbcDatalog is designed to be easily extensible with new evaluation engines and new language features. We hope that it proves to be useful for both research and pedagogy. AbcDatalog is distributed under a BSD License . Downloads AbcDatalog is now on GitHub Users Guide Datalog Syntax and Grammar The graphical Datalog editorinterpreter and the parser included in the source code both recognize the following grammar for Datalog a Const X Var p PredicateSym t Term a XA Atom p pt, ..., t Premise A not A t t t tC Clause A. A - , ..., . All identifiers must consist of a combination of alphanumeric characters and underscores. Constants and predicate symbols must start with a lowercase letter or a digit. Variables must start with an uppercase letter or an underscore. The variable represents an anonymous variable each instance of in a clause is treated as a fresh variable. We enforce the requirement that every variable in a clause must be bound. A variable X is bound if at least one of the following conditions holds X is an argument to a positive i.e., non-negated atom in the clause body. X is explicitly unified with a constant e.g., X a or with a variable that is bound e.g., X Y and Y is bound. An AbcDatalog program consists of a set of clauses. Bodiless clauses are treated as initial facts. Clauses with bodies are treated as rules for deriving IDB relations. A query is phrased as an atom followed by a question mark. Not every evaluation engine provided by AbcDatalog supports every language feature in the above grammar. Comments begin with the character and extend to the end of the line. See tc.dtlg for an example AbcDatalog program. Using the source code The source code is documented with Javadocs, which are also available here . We refer you in particular to these interfaces, which provide the main ways of interfacing with the Datalog evaluation algorithms we have implemented edu.harvard.seas.pl.abcdatalog.engine.DatalogEngine edu.harvard.seas.pl.abcdatalog.engine.DatalogEngineWithProvenance edu.harvard.seas.pl.abcdatalog.executor.DatalogExecutor The classes edu.harvard.seas.pl.abcdatalog.engine.EngineExample and edu.harvard.seas.pl.abcdatalog.executor.ExecutorExample also provide examples of how to use these interfaces. Please see the README for information on compiling the source code. Using the GUI Start the GUI from the command line with java -jar AbcDatalog-X.Y.Z.jar . Use the menu to open an existing Datalog source file, or create one from scratch in the editor. Clicking the Load button loads the program currently in the editor into the Datalog interpreter. Perform a query on the loaded program by entering the query in the query text area and clicking the Run button. Any matching facts are displayed in the space below. Remember that a query has to have the form of an atom followed by a question mark. For instance, say we type the following program into the Datalog editor namealice.namebob.nameworld.helloX - nameX. If we then load the program and pose the query helloX , we get helloalicehellobobhelloworld People The primary contributors to AbcDatalog are Aaron Bembenek Stephen Chong Marco Gaboardi Question, comment, bug report Please raise a GitHub issue . Thanks to Joo Gonalves for helping transition AbcDatalog to GitHub Acknowledgements AbcDatalog has been developed as part of the Privacy Tools for Sharing Research Data project at Harvard University and is supported by the National Science Foundation under Grant Nos. 1237235 and 1054172. Last updated sometime .", "metadata": {"last_modified": "2023-12-27T21:51:10Z", "scraped_at": "2024-10-17T21:11:39Z", "word_count": 608, "url": "https://harvardpl.github.io/AbcDatalog/"}}, "https://acmg.seas.harvard.edu/": {"text_content": "Skip to main content Main Menu Utility Menu Search HARVARD.EDU Atmospheric Chemistry Modeling Group - Harvard University Group Leaders Daniel J. Jacob and Loretta J. Mickley Home Research Publications Presentations Education People GEOS-Chem Contact us Group meetings Seminars Alumni List and Map Group Photos Graduate Student Forum Journal Club IMI JLAQC FAQs by PhD Applicants Undergraduate Research Employment ACMG Wiki Calendar private HARVARD JOHN A. PAULSON SCHOOL OF ENGINEERING AND APPLIED SCIENCES HARVARD UNIVERSITY DEPARTMENT OF EARTH AND PLANETARY SCIENCES HARVARD UNIVERSITY CENTER FOR THE ENVIRONMENT JOINT LABORATORY FOR AIR QUALITY AND CLIMATE JLAQC Copyright c 2021 Harvard University Atmospheric Chemistry Modeling Group. css-branding css-slideshow Admin Login Copyright 2024 The President and Fellows of Harvard College Accessibility Digital Accessibility Report Copyright Infringement", "metadata": {"last_modified": "2024-10-17T20:58:26Z", "scraped_at": "2024-10-17T21:11:39Z", "word_count": 122, "url": "https://acmg.seas.harvard.edu/"}}}