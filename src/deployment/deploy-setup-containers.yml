- name: Configure containers on app server
  hosts: appserver
  connection: ssh
  become: true

  tasks:
    # Setup secrets so containers can have access to GCP resources 
    - name: Get the PWD
      shell: "pwd"
      register: mydir
      
    - name: Print the PWD
      debug:
        var: mydir

    - name: Create secrets directory
      file:
        path: "/srv/secrets"
        state: "directory"
        mode: 0755

    - name: Copy service account key file
      copy:
        src: /secrets/gcp-service.json # ../secrets/gcp-service.json
        dest: "/srv/secrets/gcp-service.json"
        mode: 0644

    - name: Authenticate gcloud using service account
      shell: "gcloud auth activate-service-account --key-file /srv/secrets/gcp-service.json"
    
    # Create common network for all containers
    - name: Create network
      docker_network:
          name: "{{docker_network_name}}"
          driver: "bridge"
          attachable: "yes"

    - name: Debug Docker networks
      shell: docker network ls
      register: docker_networks
    - name: Print Docker networks
      debug:
        var: docker_networks.stdout_lines

    - name: Copy docker tag file
      copy:
        src: .docker-tag
        dest: .docker-tag
        mode: 0644

    - name: "Get docker tag"
      shell: "cat .docker-tag"
      register: tag

    - name: Print tag
      debug:
        var: tag.stdout

    - name: Create frontend container
      docker_container:
        name: "frontend"
        image: "gcr.io/{{ gcp_project }}/frontend:{{ tag.stdout}}"
        state: started
        recreate: yes
        pull: yes
        restart: yes
        published_ports:
          - 3000:3000
        networks:
          - name: "{{docker_network_name}}"

    - name: Capture frontend container logs
      shell: docker logs frontend
      register: frontend_logs

    - name: Print frontend container logs
      debug:
        var: frontend_logs.stdout_lines

    - name: Debug frontend container details
      shell: docker inspect frontend
      register: frontend_details
    - name: Print frontend container details
      debug:
        var: frontend_details.stdout_lines

    # Create a folder on persistent disk
    - name: Create persistent directory
      file:
        path: "/mnt/disk-1/persistent"
        state: "directory"
        mode: 0777

    - name: Create api-service container
      docker_container:
        name: "api-service"
        image: "gcr.io/{{ gcp_project }}/api-service:{{ tag.stdout}}"
        state: started
        recreate: yes
        published_ports:
          - 9000:9000
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "/secrets/gcp-service.json"
          GCP_PROJECT: "{{ gcp_project }}"
          BUCKET_NAME: "cs-crimsonchat"
          QDRANT_URL: "https://1494f517-c19c-490b-8a4e-43ff3b02bbb7.europe-west3-0.gcp.cloud.qdrant.io:6333"
          QDRANT_API_KEY: "5qJBIKdEycPYlWfaDiAwd-1Hz2z88qaBsSV_UAa4AljpqWpWGzmRTg"
          QDRANT_COLLECTION_NAME: "ms3-production_v256_te004"
        networks:
          - name: "{{docker_network_name}}"
        volumes:
          - /mnt/disk-1/persistent:/persistent
          - /srv/secrets:/secrets

    - name: Capture api-service container logs
      shell: docker logs api-service
      register: api_service_logs

    - name: Print api-service container logs
      debug:
        var: api_service_logs.stdout_lines

    - name: Debug api-service container details
      shell: docker inspect api-service
      register: api_service_details
    - name: Print api-service container details
      debug:
        var: api_service_details.stdout_lines

    - name: Check running containers
      shell: docker ps
      register: running_containers
    - name: Print running containers
      debug:
        var: running_containers.stdout_lines

    - name: "Remove all unused containers"
      shell: docker system prune -a -f
